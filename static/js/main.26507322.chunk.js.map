{"version":3,"sources":["components/InputSearch.js","config.js","components/Image.js","components/Overview.js","components/TimesBtn.js","components/Times.js","components/Units.js","components/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","city","country","countryCode","lat","lng","reducer","state","action","type","location","InputSearch","getLocation","useReducer","dispatch","useEffect","placeholder","options","appId","apiKey","onChange","query","rawAnswer","suggestion","suggestionIndex","name","latlng","keys","openWeatherMap","unsplash","Image","description","useState","image","setImage","Math","floor","random","imageNumber","setImageNumber","encodedDescription","encodeURIComponent","weather","fetch","then","response","json","className","Object","length","src","results","urls","regular","alt","convertDay","date","convertMonth","Overview","display","units","main","icon","temp","humidity","wind","wind_speed","Date","dt","precipitation","pop","getDay","getMonth","getDate","getFullYear","day","min","max","toFixed","getDayLetter","TimesBtn","timeProp","time","setTime","Times","setDisplay","data","getWeather","now","nextHours","hours","hour","getHours","push","map","index","id","onClick","hourly","daily","Units","changeUnits","checked","setChecked","value","Forecast","setData","setUnits","console","log","catch","error","App","setWeather","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26507322.chunk.js","sourcesContent":["import React, { useEffect, useReducer } from 'react'\nimport AlgoliaPlaces from 'algolia-places-react';\n\nconst initialState = {\n  city: '',\n  country: '',\n  countryCode: '',\n  lat: '',\n  lng: ''\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'update':\n      return {\n        city: action.location.city,\n        country: action.location.country,\n        countryCode: action.location.countryCode,\n        lat: action.location.lat,\n        lng: action.location.lng\n      }\n    default: return state\n  }\n}\n\nfunction InputSearch({ getLocation }) {\n\n  const [location, dispatch] = useReducer(reducer, initialState)\n\n  const { city, country, countryCode, lat, lng } = location\n\n  useEffect(() => getLocation(city, country, countryCode, lat, lng), [city, country, countryCode, lat, lng, location])\n\n  return (\n    <AlgoliaPlaces\n      placeholder=\"Write a city name here\"\n \n      options={{\n        appId: 'plCIL43TO1Z4',\n        apiKey: 'be563ce995a9d539bed17e7dd31bb4f3',\n        type: 'city'\n      }}\n \n      onChange={({ query, rawAnswer, suggestion, suggestionIndex }) => {\n        dispatch({\n          type: 'update',\n          location: {\n            city: suggestion.name,\n            country: suggestion.country,\n            countryCode: suggestion.countryCode,\n            lat: suggestion.latlng.lat,\n            lng: suggestion.latlng.lng\n          }\n        })\n      }}\n    />\n  )\n}\n\nexport default InputSearch\n","let keys = {\n  openWeatherMap: 'eb7ce88a5d6bebe42b30615977a74e6a',\n  unsplash: 'SGxe59ZdA_VwNGj-DWCNVPWg6zesXF5qySgXY9xsn6w'\n}\n\nexport default keys","import React, { useState, useEffect } from 'react'\nimport keys from '../config'\n\nfunction Image( { description } ) {\n\n  const [image, setImage] = useState({})\n  const [imageNumber, setImageNumber] = useState(Math.floor(Math.random() * 19))\n  const encodedDescription = encodeURIComponent(`${description.weather[0].description}`)\n\n  useEffect(() => {\n    fetch(`https://api.unsplash.com/search/photos?query=${encodedDescription}&per_page=20&client_id=${keys.unsplash}`)\n      .then(response => response.json())\n      .then(response => { \n        setImage(response)\n        setImageNumber(Math.floor(Math.random() * 19))\n      })\n  }, [description])\n\n  return (\n    <div className=\"image\">\n      {\n        Object.keys(image).length !== 0 &&\n        <img src={image.results[imageNumber].urls.regular} alt={image.description} />\n      }\n    </div>\n  )\n}\n\nexport default Image\n","import React from 'react'\n\nfunction Overview({ city, country, display, units }) {\n\n  const main = display.weather[0].main\n  const description = display.weather[0].description\n  const icon = display.weather[0].icon\n  const temp = display.temp\n  const humidity = display.humidity\n  const wind = display.wind_speed\n  const date = new Date(display.dt * 1000)\n  const precipitation = display.pop;\n\n  return (\n    <div className=\"forecast\">\n\n      <div className=\"forecast__heading\">\n        <h2>{city}, {country}</h2>\n        <h3>{convertDay(date.getDay())}, {convertMonth(date.getMonth())} {date.getDate()}, {date.getFullYear()}</h3>\n      </div>\n\n      <div className=\"forecast__content\">\n\n        <div className=\"forecast__main\">\n          <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt='Icon representing the weather'/>\n          <div className=\"forecast__temp\">\n            {\n              typeof temp === 'number' ?\n                <div className=\"forecast__temp--main\">{temp}{ units === 'imperial' ? '°F' : '°C' }</div> :\n                <div>\n                  <div className=\"forecast__temp--main\">{temp.day}{ units === 'imperial' ? '°F' : '°C' }</div>\n                  <div>\n                    <span className=\"forecast__temp--min\">{temp.min}</span>\n                    <span className=\"forecast__temp--max\">{temp.max}</span>\n                  </div>\n                </div>\n            }\n          </div>\n        </div>\n\n        <div className=\"forecast__description\">{main} - {description}</div>\n\n        <div className=\"forecast__details\">\n          <div><span className=\"details\">Precipitation:</span> {(precipitation * 100).toFixed(0)}%</div>\n          <div><span className=\"details\">Humidity:</span> {humidity}%</div>\n          <div><span className=\"details\">Wind:</span> {wind}{ units === 'imperial' ? 'm/h' : 'm/s' }</div>\n        </div>\n\n      </div>\n    </div>\n  )\n}\n\nconst convertDay = (date) => {\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thuesday', 'Friday', 'Saturday', 'Sunday']\n  return days[date]\n}\n\nconst convertMonth = (date) => {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n  return months[date]\n}\n\nexport default Overview\n","import React, { useState, useEffect } from 'react'\n\nfunction TimesBtn({ timeProp, type }) {\n\n  const [time, setTime] = useState(timeProp)\n\n  useEffect(() => {\n    if (type === 'date') {\n      setTime(getDayLetter(time))\n    } else {\n      setTime(`${timeProp}:00`)\n    }\n  }, [])\n\n  return (\n    <div>\n      <button type=\"button\">{time}</button>\n    </div>\n  )\n}\n\nconst getDayLetter = (date) => {\n  const dayLetters = ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n  return dayLetters[date]\n}\n\nexport default TimesBtn\n","import React from 'react'\nimport TimesBtn from './TimesBtn';\n\nfunction Times({ setDisplay, data, getWeather }) {\n\n  const now = new Date();\n  const nextDays = [0, 1, 2, 3, 4, 5, 6, 7]\n  const nextHours = (() => {\n    const hours = []\n    let hour = now.getHours();\n    while (hour % 3 !== 0) {\n      hour -= 1\n    }\n    hours.push(hour)\n    while (hours.length < 8) {\n      if (hour === 24) hour = 0\n      hours.push(hour+=3)\n    }\n    return hours\n  })()\n\n  return (\n    <div className=\"buttons\">\n\n      <ul className=\"buttons__hours\">\n       {\n          nextHours.map((hour, index) =>\n            <li\n              key={`hourly-${index * 3}`}\n              id={`hourly-${index * 3}`}\n              onClick={(\n                () => {\n                  setDisplay(data.hourly[index * 3])\n                  getWeather(data.hourly[index * 3])\n                }          \n              )}>\n                <TimesBtn timeProp={hour} type=\"hour\" />\n            </li>)\n        }\n      </ul>\n\n      <ul className=\"buttons__days\">\n        {\n          nextDays.map(day =>\n            <li\n              key={`daily-${day}`}\n              id={`daily-${day}`}\n              onClick={(\n                () => {\n                  setDisplay(data.daily[day])\n                  getWeather(data.daily[day])\n                }\n              )}>\n                <TimesBtn timeProp={(now.getDay() + day) % 7} type=\"date\" />\n            </li>)\n        }\n      </ul>\n\n    </div>\n  )\n}\n\nexport default Times\n","import React, { useState } from 'react'\n\nfunction Units( { changeUnits }) {\n\n  const [checked, setChecked] = useState('metric')\n\n  return (\n    <div className=\"units\">\n          \n      <input type=\"radio\" id=\"imperial\" name=\"units\" value=\"imperial\" checked={checked === 'imperial'}/>\n      <label onClick={() => {\n        changeUnits('imperial')\n        setChecked('imperial')\n      }}>°F</label> | \n      \n      <input type=\"radio\" id=\"metric\" name=\"units\" value=\"metric\" checked={checked === 'metric'}/>\n      <label onClick={() => {\n        changeUnits('metric')\n        setChecked('metric')\n      }}>°C</label>\n      \n    </div>\n  )\n}\n\nexport default Units\n","import React, { useState, useEffect } from 'react'\nimport Overview from './Overview'\nimport Times from './Times'\nimport keys from '../config'\nimport Units from './Units'\n\nfunction Forecast({ city, country, countryCode, lat, lng, getWeather }) {\n\n  const [data, setData] = useState({})\n  // Units can be imperial (Fahrenheit, m/h) or metric (Celsius, m/s)\n  const [display, setDisplay] = useState({})\n  const [units, setUnits] = useState('metric')\n\n  const changeUnits = (units) => {\n    setUnits(units)\n  }\n\n  useEffect(() => {\n    if (!city) return\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&units=${units}&appid=${keys.openWeatherMap}`)\n      .then(response => response.json())\n      .then(response => {\n        console.log(response)\n        setData(response)\n        setDisplay(response.hourly[0])\n        getWeather(response.hourly[0])\n      })\n      .catch(error => console.log(error))\n    }, [city, country, countryCode, lat, lng, units])\n\n  return (\n    (Object.keys(data).length !== 0) &&\n    <div>\n      {(Object.keys(display).length !== 0) &&\n        <Overview\n          city={city} \n          country={country}\n          display={display}\n          units={units}\n        />\n      }\n      <Times setDisplay={setDisplay} getWeather={getWeather} data={data}/>\n      <Units changeUnits={changeUnits} />\n    </div>\n  )\n}\n\nexport default Forecast\n","import React, { useReducer, useState } from 'react'\nimport InputSearch from './components/InputSearch'\nimport Image from './components/Image'\nimport Forecast from './components/Forecast'\nimport './sass/main.scss'\n\nconst initialState = {\n  city: '',\n  country: '',\n  countryCode: '',\n  lat: '',\n  lng: ''\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'update':\n      return {\n        city: action.location.city,\n        country: action.location.country,\n        countryCode: action.location.countryCode,\n        lat: action.location.lat,\n        lng: action.location.lng\n      }\n    default: return state\n  }\n}\n\nfunction App() {\n\n  const [location, dispatch] = useReducer(reducer, initialState)\n  const [weather, setWeather] = useState({ weather: [{ description: 'sky' }]})\n\n  const getLocation = (city, country, countryCode, lat, lng) => {\n    dispatch({\n      type: 'update',\n      location: {\n        city,\n        country,\n        countryCode,\n        lat,\n        lng\n      }\n    })\n  }\n\n  const getWeather = (description) => {\n    setWeather(description)\n  }\n\n  const { city, country, countryCode, lat, lng } = location\n\n  return (\n    <div className=\"App\">\n      <div className=\"content\">\n        <main className=\"main\">\n          <header>\n            <div className=\"heading\">Through the window</div>\n            <h1>Weather</h1>\n          </header>\n          <InputSearch getLocation={getLocation}/>\n          <Forecast city={city} country={country} countryCode={countryCode} lat={lat} lng={lng} getWeather={getWeather}/>\n        </main>\n        <Image description={weather}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}